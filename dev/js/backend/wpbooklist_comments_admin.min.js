/**
 * JavaScript Admin Functions - wpbooklist-comments-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in JavaScript' );
console.log( wpbooklistCommentsPhpVariables );


// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	wpbooklistCommentsAdminPointersJavascript();

	// Function to allow the visitor to 'Like' a Comment and to increment the 'Like' count in the DB.
	wpbooklistCommentsLikeButton();

	// Function to allow the visitor to submit a new comment.
	wpbooklistCommentsSubmit();

	// Function to allow the approval of a comment in dashboard.
	wpbooklistCommentsApproveButton();

	// Function to allow the editing of a comment in dashboard.
	wpbooklistCommentsEditButton();

	// Function to allow the deletion of a comment in dashboard.
	wpbooklistCommentsDeleteButton();

	// Function to allow the viewing of archived comments in dashboard.
	wpbooklistCommentsManipArchivedButton();

	// Function to enable the 'Submit' button for the archived comments
	wpbooklistCommentsEnableArchivedSubmitButton();

	// Function to enable the Submission of the Settings
	wpbooklistCommentsSubmitSettingsButton();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to enable the Submission of the Settings
	function wpbooklistCommentsSubmitSettingsButton(){

		$( document ).on( 'click', '#wpbooklist-comments-save-settings', function( event ) {

			$( '#wpbooklist-spinner-comments-settings' ).animate({'opacity':'1'});

			var request = '';
			var commentsarrive = $( '#wpbooklist-comments-newcomment-behavior' ).val();
			var displayorder = $( '#wpbooklist-comments-display-order' ).val();
			var archiveafter = $( '#wpbooklist-comments-archive-after' ).val();
			var deleteafter = $( '#wpbooklist-comments-delete-after' ).val();
			var restrictto = $( '#wpbooklist-comments-restrict-to' ).val();

			var data = {
				'action': 'wpbooklist_comments_submit_settings_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce7,
				'commentsarrive': commentsarrive,
				'displayorder': displayorder,
				'archiveafter': archiveafter,
				'restrictto': restrictto,
				'deleteafter': deleteafter
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);
					$( '#wpbooklist-spinner-comments-settings' ).animate({'opacity':'0'});
					$( '#wpbooklist-admin-addbook-response-actual-container' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/>" + wpbooklistCommentsPhpVariables.trans67 + ' ' + wpbooklistPhpVariables.trans43 + "&nbsp;<a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/>" + wpbooklistPhpVariables.trans45 + "&nbsp;<a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});


		});

	}

	// Function to enable the 'Submit' button for the archived comments
	function wpbooklistCommentsEnableArchivedSubmitButton(){

		$( document ).on( 'change', '.wpbooklist-comments-archived-selection-controls-view-delete', function( event ) {

			if ( null !== $( this ).val() && null !== $( '.wpbooklist-comments-archived-selection-controls-timeframe' ).val() ) {
				$( '#wpbooklist-comments-archived-submit' ).removeAttr( 'disabled' );
			}

		});

		$( document ).on( 'change', '.wpbooklist-comments-archived-selection-controls-timeframe', function( event ) {

			if ( null !== $( this ).val() && null !== $( '.wpbooklist-comments-archived-selection-controls-view-delete' ).val() ) {
				$( '#wpbooklist-comments-archived-submit' ).removeAttr( 'disabled' );
			}

		});	
	}


	// Function to allow the editing of a comment in dashboard.
	function wpbooklistCommentsManipArchivedButton() {

		$( document ).on( 'click', '#wpbooklist-comments-archived-submit', function( event ) {

			$( '#wpbooklist-spinner-archived' ).animate({'opacity': '1'});

			var request = '';
			var viewdelete = $( '.wpbooklist-comments-archived-selection-controls-view-delete' ).val();
			var timeframe = $( '.wpbooklist-comments-archived-selection-controls-timeframe' ).val();

			var data = {
				'action': 'wpbooklist_comments_maniparchived_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce6,
				'viewdelete': viewdelete,
				'timeframe': timeframe,
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);

					// If respones is '' that means we just deleted comments - reload the page.
					if ( '' === response ) {
						document.location.reload( true );
					}

					// Display the requested Archived comments.
					$('#wpbooklist-comments-inner-wrapper-archive-response').html(response);
					$( '#wpbooklist-spinner-archived' ).animate({'opacity': '0'});

				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		})
	}

	// Function to allow the editing of a comment in dashboard.
	function wpbooklistCommentsDeleteButton() {

		$( document ).on( 'click', '.wpbooklist-comments-control-button-remove', function( event ) {

			$( this ).next().next().animate({'opacity': '1'});

			var request = '';
			var commentid = $( this ).attr( 'data-commentid' );
			var bookuid = $( this ).attr( 'data-bookuid' );

			var data = {
				'action': 'wpbooklist_comments_delete_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce5,
				'commentid': commentid,
				'bookuid': bookuid,
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);

					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		})
	}

	// Function to allow the editing of a comment in dashboard.
	function wpbooklistCommentsEditButton() {

		$( document ).on( 'click', '.wpbooklist-comments-control-button-edit', function( event ) {

			$( this ).next().next().animate({'opacity': '1'});

			var request = '';
			var commentid = $( this ).attr( 'data-commentid' );
			var bookuid = $( this ).attr( 'data-bookuid' );
			var commentactual = $( this ).parent().prev().find( 'textarea' ).val();
			var rating = $( this ).parent().prev().find( '.wpbooklist-comments-star-dropdown' ).val();

			var data = {
				'action': 'wpbooklist_comments_edit_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce4,
				'commentid': commentid,
				'bookuid': bookuid,
				'commentactual': commentactual,
				'rating': rating
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);

					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		})
	}

	function wpbooklistCommentsApproveButton() {

		$( document ).on( 'click', '.wpbooklist-comments-control-button-update', function( event ) {

			$( this ).next().next().animate({'opacity': '1'});

			var request = '';
			var commentid = $( this ).attr( 'data-commentid' );
			var bookuid = $( this ).attr( 'data-bookuid' );

			var commentactual = $( this ).parent().prev().find( 'textarea' ).val();
			var rating = $( this ).parent().prev().find( '.wpbooklist-comments-star-dropdown' ).val();

			var data = {
				'action': 'wpbooklist_comments_approve_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce3,
				'commentid': commentid,
				'bookuid': bookuid,
				'rating': rating,
				'commentactual': commentactual,
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);

					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});


		})

	}


	function wpbooklistCommentsLikeButton() {

		$( document ).on( 'click', '.wpbooklist-comments-likes-thumb-img-wrapper', function( event ) {

			var newlikes  = 0;
			var commentid = '';
			var request = '';
			var bookuid = $( this ).attr( 'data-bookuid' );

			// Dim and disable the like button, and get the attributes needed to update the DB.
			$(this).css({ 'opacity': '0.5', 'pointer-events': 'none' });
			commentid = $( this ).attr( 'data-commentid' );

			// Increment the Like number.
			newlikes  = parseInt(  $(this).attr( 'data-likes' ) ) + 1 ;

			// Display the new Like number.
			$(this).next( '.wpbooklist-comments-total-likes-p' ).text( newlikes  + ' ' + wpbooklistCommentsPhpVariables.trans36 );

			var data = {
				'action': 'wpbooklist_comments_like_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce1,
				'commentid': commentid,
				'newlikes': newlikes,
				'bookuid': bookuid
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log(response);
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			console.log('clicked!!!)');
		});

	}

	// Function to allow the visitor to submit a new comment.
	function wpbooklistCommentsSubmit() {

		$( document ).on( 'click', '.wpbooklist-comments-add-comment-submit-button', function( event ) {

			$( '#wpbooklist-spinner-comments' ).animate({'opacity': '1'});

			var request = '';
			var bookid  = $( this ).attr( 'data-bookid' );
			var booktitle = $( this ).attr( 'data-title' );
			var bookuid = $( this ).attr( 'data-bookuid' );
			var library = $( this ).attr( 'data-library' );
			var rating = $( '#wpbooklist-comments-add-comment-rating-actual' ).val();
			var commentactual = $( '#wpbooklist-comments-add-comment-actual' ).val();
			var newcommenthtml = '';
			var ratingImg = '';

			var data = {
				'action': 'wpbooklist_comments_submit_action',
				'security': wpbooklistCommentsPhpVariables.adminnonce2,
				'bookid': bookid,
				'booktitle': booktitle,
				'bookuid': bookuid,
				'library': library,
				'rating': rating,
				'commentactual': commentactual,
			};

			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					$( '#wpbooklist-spinner-comments' ).animate({'opacity': '0'});

					response = response.split( '-' );

					if ( '1' === response[0] ) {

						$( '.wpbooklist-comments-add-comment-submit-button' ).attr( 'disabled', true );
						$( '.wpbooklist-comments-add-comment-submit-button' ).css({'opacity': '0.5'});
						$( '#wpbooklist-colorbox-comments-response-div' ).text( wpbooklistCommentsPhpVariables.trans65 );
					}

					console.log(response);
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			console.log('fdsaclicked!!!)');
		});

	}

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function wpbooklistCommentsAdminPointersJavascript() {

		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans135 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave.
			$( 'body' ).on( 'mouseleave', '.wpbooklist-icon-image-question', function() {
				pointer.pointer( 'close' );
			});

		});

		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans203 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans204 + wpbooklistPhpVariables.SETTINGS_PAGE_URL + wpbooklistPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}
});
